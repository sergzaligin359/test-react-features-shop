import React, { useState } from 'react'

export default () => {

    let [version, setVersion] = useState(0);
    let [cellClassName] = useState('cell');
    const [relativeshipNode] = useState([[0, 1], [1, 0], [0, -1], [-1, 0]]);

    console.log('render');

    const [grid] = useState([
        [1, 0, 0, 1],
        [0, 0, 1, 1],
        [1, 0, 0, 1]
    ]);

    const dfs = (grid, y, x) => {
        console.log('dfs === grid, i-y, j-x', grid, y, x);
        grid[y][x] = 0;

        for(let [dx, dy] of relativeshipNode){
            const nextX = x + dx;
            const nextY = y + dy;
            if(withinGrid(grid.length, grid[0].length, nextX, nextY) && grid[nextY][nextX] === 1){
                dfs(grid, nextY, nextX);
            }
        }
    }

    const withinGrid = (h, w, x, y) => {
        return 0 <= x && x < w && 0 <= y && y < h;
    }

    const addColorCell = v => {
        return `${v ? cellClassName + '-red' : cellClassName + '-green' }`
    }

    const handlerClick = e => {
        const target = e.target;
        const val = +target.dataset.val;
        const i = +target.dataset.i;
        const j = +target.dataset.j;

        e.stopPropagation();
        if(target.hasAttribute('data-val') && val){
            dfs(grid, i, j);
            setVersion(version += 1);
        }
    }

    const drawGrid = grid => (
        grid.map((row, i) => (

            <div key={ i }>
                {
                    row.map((val, j) => (
                        <div 
                            key={ i * row.length + j } 
                            className={`${cellClassName} ${ addColorCell(val) }`}
                            data-val={ val }
                            data-i={ i }
                            data-j={ j }
                        />
                    ))
                }
            </div>
        ))
    )

    return (
        <div onClick={handlerClick} >
            {
                drawGrid(grid)
            }
        </div>
    )
}
